/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateTestdriveArgs } from "./CreateTestdriveArgs";
import { UpdateTestdriveArgs } from "./UpdateTestdriveArgs";
import { DeleteTestdriveArgs } from "./DeleteTestdriveArgs";
import { TestdriveCountArgs } from "./TestdriveCountArgs";
import { TestdriveFindManyArgs } from "./TestdriveFindManyArgs";
import { TestdriveFindUniqueArgs } from "./TestdriveFindUniqueArgs";
import { Testdrive } from "./Testdrive";
import { User } from "../../user/base/User";
import { TestdriveService } from "../testdrive.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Testdrive)
export class TestdriveResolverBase {
  constructor(
    protected readonly service: TestdriveService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Testdrive",
    action: "read",
    possession: "any",
  })
  async _testdrivesMeta(
    @graphql.Args() args: TestdriveCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Testdrive])
  @nestAccessControl.UseRoles({
    resource: "Testdrive",
    action: "read",
    possession: "any",
  })
  async testdrives(
    @graphql.Args() args: TestdriveFindManyArgs
  ): Promise<Testdrive[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Testdrive, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Testdrive",
    action: "read",
    possession: "own",
  })
  async testdrive(
    @graphql.Args() args: TestdriveFindUniqueArgs
  ): Promise<Testdrive | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Testdrive)
  @nestAccessControl.UseRoles({
    resource: "Testdrive",
    action: "create",
    possession: "any",
  })
  async createTestdrive(
    @graphql.Args() args: CreateTestdriveArgs
  ): Promise<Testdrive> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        owner: args.data.owner
          ? {
              connect: args.data.owner,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Testdrive)
  @nestAccessControl.UseRoles({
    resource: "Testdrive",
    action: "update",
    possession: "any",
  })
  async updateTestdrive(
    @graphql.Args() args: UpdateTestdriveArgs
  ): Promise<Testdrive | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          owner: args.data.owner
            ? {
                connect: args.data.owner,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Testdrive)
  @nestAccessControl.UseRoles({
    resource: "Testdrive",
    action: "delete",
    possession: "any",
  })
  async deleteTestdrive(
    @graphql.Args() args: DeleteTestdriveArgs
  ): Promise<Testdrive | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "owner",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async resolveFieldOwner(
    @graphql.Parent() parent: Testdrive
  ): Promise<User | null> {
    const result = await this.service.getOwner(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
